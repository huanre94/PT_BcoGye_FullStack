// <auto-generated />
using System;
using BE.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BE.Infrastructure.Migrations
{
    [DbContext(typeof(BEContext))]
    [Migration("20250916055643_SeedUsersDataFixed")]
    partial class SeedUsersDataFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BE.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2")
                        .HasColumnName("creado");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("BE.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2")
                        .HasColumnName("creado");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_suppliers");

                    b.ToTable("suppliers", (string)null);
                });

            modelBuilder.Entity("BE.Domain.Entities.SupplierProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2")
                        .HasColumnName("creado");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<string>("LotNumber")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("lot_number");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_id");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supplier_id");

                    b.HasKey("Id")
                        .HasName("pk_supplier_products");

                    b.HasIndex("SupplierId")
                        .HasDatabaseName("ix_supplier_products_supplier_id");

                    b.HasIndex("ProductId", "SupplierId", "LotNumber")
                        .HasDatabaseName("ix_supplier_products_product_id_supplier_id_lot_number");

                    b.ToTable("supplier_products", (string)null);
                });

            modelBuilder.Entity("BE.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Actualizado")
                        .HasColumnType("datetime2")
                        .HasColumnName("actualizado");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("datetime2")
                        .HasColumnName("creado");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit")
                        .HasColumnName("es_activo");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_name");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Creado = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EsActivo = true,
                            Password = new byte[] { 36, 11, 229, 24, 250, 189, 39, 36, 221, 182, 240, 78, 235, 29, 165, 150, 116, 72, 215, 232, 49, 192, 140, 143, 168, 34, 128, 159, 116, 199, 32, 169 },
                            Role = 0,
                            UserName = "admin@test.com"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Creado = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EsActivo = true,
                            Password = new byte[] { 230, 6, 227, 139, 13, 140, 25, 178, 76, 240, 238, 56, 8, 24, 49, 98, 234, 124, 214, 63, 247, 145, 45, 187, 34, 181, 232, 3, 40, 107, 68, 70 },
                            Role = 1,
                            UserName = "user@test.com"
                        });
                });

            modelBuilder.Entity("BE.Domain.Entities.SupplierProduct", b =>
                {
                    b.HasOne("BE.Domain.Entities.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_products_products_product_id");

                    b.HasOne("BE.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_products_suppliers_supplier_id");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BE.Domain.Entities.Product", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("BE.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
